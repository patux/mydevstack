#!/bin/bash
# Base template to create a localrc to bulid devstack
#
# A reference for a good localrc here:
# http://www.sebastien-han.fr/blog/2013/08/16/best-localrc-for-devstack/
#
. /etc/environment
# Adding havana repo
sudo apt-get install -y python-software-properties 
sudo add-apt-repository -y cloud-archive:havana
sudo apt-get update -y
sudo apt-get -y dist-upgrade

# start the devstack localrc configuration
git clone https://github.com/openstack-dev/devstack.git -b <%= @devstack_branch %> devstack
cd devstack
git checkout <%= @devstack_branch %>
echo DATABASE_PASSWORD=password > localrc
echo RABBIT_PASSWORD=password >> localrc
echo SERVICE_TOKEN=password >> localrc
echo SERVICE_PASSWORD=password >> localrc
echo ADMIN_PASSWORD=password >> localrc
echo LOGFILE=/opt/stack/stack.sh.log >> localrc
echo >> localrc 
echo disable_service n-net >> localrc
echo enable_service q-svc >> localrc
echo enable_service q-agt >> localrc
echo enable_service q-dhcp >> localrc
echo enable_service q-l3 >> localrc
echo enable_service q-meta >> localrc
echo enable_service neutron >> localrc
echo enable_service n-novnc >> localrc
echo enable_service n-xvnc >> localrc
echo enable_service n-cauth >> localrc
# Optional, to enable tempest configuration as part of devstack
echo  enable_service tempest >> localrc
cat << EOF >> localrc 
# Reclone each time
RECLONE=yes

## For Keystone
KEYSTONE_TOKEN_FORMAT=PKI

# Enable Logging
VERBOSE=True
LOG_COLOR=True
SCREEN_LOGDIR=/opt/stack/logs

# Horizon (Dashboard UI) - (always use the trunk)
ENABLED_SERVICES+=,horizon

IMAGE_URLS+=",https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img"
IMAGE_URLS+=",http://fedorapeople.org/groups/heat/prebuilt-jeos-images/F17-x86_64-cfntools.qcow2,http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img"

EOF
<% if has_variable?("ipaddress_eth1") %><% then %>
    echo HOST_IP=<%= @ipaddress_eth1 %> >> localrc
    echo NETWORK_GATEWAY=<%= @network_eth1 %>.1 | cut -d'.' -f1-3,5 >> localrc
    echo FLOATING_RANGE=<%= @network_eth1 %>.64/26 | cut -d'.' -f1-3,5 >> localrc
    echo FIXED_RANGE=<%= @network_eth1 %>.128/25 | cut -d'.' -f1-3,5 >> localrc
    echo FIXED_NETWORK_SIZE=128 >> localrc
<% else %>
    echo HOST_IP=<%= @ipaddress_eth1 %> >> localrc
    echo NETWORK_GATEWAY=<%= @network_eth1 %>.1 | cut -d'.' -f1-3,5 >> localrc
    echo FLOATING_RANGE=<%= @network_eth1 %>.64/26 | cut -d'.' -f1-3,5 >> localrc
    echo FIXED_RANGE=<%= @network_eth1 %>.128/25 | cut -d'.' -f1-3,5 >> localrc
    echo FIXED_NETWORK_SIZE=128 >> localrc
<% end %>

# Build vms-talk.sh script
cat << EOS > $HOME/vms-talk.sh
#!/bin/bash
# Allowing guests in DevStack to talk to outside world 
# https://ask.openstack.org/en/question/1830/allowing-guests-in-devstack-to-talk-to-outside-world/
/sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
# Save lists
# https://help.ubuntu.com/community/IptablesHowTo
/sbin/iptables-save -c > /etc/iptables.rules
cat << EOF > /etc/network/if-pre-up.d/iptablesload
#!/bin/sh
/sbin/iptables-restore < /etc/iptables.rules
exit 0
EOF
cat << EOF > /etc/network/if-post-down.d/iptablessave
#!/bin/sh
/sbin/iptables-save -c > /etc/iptables.rules
if [ -f /etc/iptables.downrules ]; then
    /sbin/iptables-restore < /etc/iptables.downrules
fi
exit 0
EOF
chmod +x /etc/network/if-post-down.d/iptablessave
chmod +x /etc/network/if-pre-up.d/iptablesload
EOS
chmod +x $HOME/vms-talk.sh

./stack.sh

