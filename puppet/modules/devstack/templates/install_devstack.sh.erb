#!/bin/bash
# Base template to create a localrc to bulid devstack
#
# A reference for a good localrc here:
# http://www.sebastien-han.fr/blog/2013/08/16/best-localrc-for-devstack/
#
. /etc/environment
git clone https://github.com/openstack-dev/devstack.git -b <%= @devstack_branch %> devstack
cd devstack
# Build localrc
echo ADMIN_PASSWORD=password > localrc
echo MYSQL_PASSWORD=password >> localrc
echo RABBIT_PASSWORD=password >> localrc
echo SERVICE_PASSWORD=password >> localrc
echo SERVICE_TOKEN=tokentoken >> localrc

echo CINDER_BRANCH=<%= @devstack_branch %> >> localrc
echo GLANCE_BRANCH=<%= @devstack_branch %> >> localrc
echo HORIZON_BRANCH=<%= @devstack_branch %> >> localrc
echo KEYSTONE_BRANCH=<%= @devstack_branch %> >> localrc
echo NOVA_BRANCH=<%= @devstack_branch %> >> localrc
echo QUANTUM_BRANCH=<%= @devstack_branch %> >> localrc
echo NEUTRON_BRANCH=<%= @devstack_branch %> >> localrc
echo SWIFT_BRANCH=<%= @devstack_branch %> >> localrc
echo HEAT_BRANCH=<%= @devstack_branch %> >> localrc
echo CEILOMETER_BRANCH=<%= @devstack_branch %> >> localrc

#Enable Logging
echo LOGFILE=/opt/stack/logs/stack.sh.log >> localrc
echo VERBOSE=True >> localrc
echo LOG_COLOR=False >> localrc
echo SCREEN_LOGDIR=/opt/stack/logs >> localrc

# Disabled  services
echo DISABLED_SERVICES+=,\
n-net,\
tempest\
>> localrc

# Enabled services
echo ENABLED_SERVICES+=,\
c-api,\
c-sch,\
c-vol,\
ceilometer-acentral,\
ceilometer-acompute,\
ceilometer-api,\
ceilometer-collector,\
cinder,\
g-api,\
g-reg,\
h-api,\
h-api-cfn,\
h-api-cw,\
h-eng,\
heat,\
horizon,\
key,\
mysql,\
neutron,\
n-api,\
n-cauth,\
n-cond,\
n-cpu,\
n-crt,\
n-novnc,\
n-obj,\
n-sch,\
n-xvnc,\
q-agt,\
q-dhcp,\
q-l3,\
q-lbaas,\
q-meta,\
q-svc,\
quantum,\
rabbit,\
swift,\
sysstat,\
trove,\
tr-api,\
tr-tmgr,\
tr-cond\
>> localrc

echo IMAGE_URLS+=,\
http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-uec.tar.gz,\
http://fedorapeople.org/groups/heat/prebuilt-jeos-images/F18-i386-cfntools.qcow2, \
>> localrc


# Optionally alter HEAT_REPO to use a fork.
# HEAT_REPO=https://github.com/sjcorbett/heat.git
# HEAT_BRANCH=master
#
#echo "# Network configuration. HOST_IP should be the same as the IP you used" >> localrc
#echo "# for the private network in your Vagrantfile. The combination of" >> localrc
#echo "# FLAT_INTERFACE and PUBLIC_INTERFACE indicates that OpenStack should" >> localrc
#echo "# bridge network traffic over ethX." >> localrc
<% if has_variable?("ipaddress_eth1") %><% then %>
echo HOST_IP=<%= @ipaddress_eth1 %> >> localrc
echo FLOATING_RANGE=$(echo <%= @ipaddress_eth1 %> | cut -d'.' -f1-3).224/27 >> localrc
echo PUBLIC_INTERFACE=eth1 >> localrc
echo HOST_IP_IFACE=eth1 >> localrc
<% else %>
echo HOST_IP=<%= @ipaddress_eth0 %> >> localrc
echo FLOATING_RANGE=$(echo <%= @ipaddress_eth0 %> | cut -d'.' -f1-3).224/27 >> localrc
echo PUBLIC_INTERFACE=eth0 >> localrc
echo HOST_IP_IFACE=eth0 >> localrc
<% end %>
#echo FLAT_INTERFACE=br100 >> localrc
#echo SCHEDULER=nova.scheduler.simple.SimpleScheduler >> localrc
#echo EXTRA_OPTS=\(scheduler_default_filters=AllHostsFilter\) >> localrc

#echo OFFLINE=True >> localrc
echo RECLONE=yes >> localrc
echo VOLUME_BACKING_FILE_SIZE=5120M >> localrc

#gre tunnels
echo ENABLE_TENANT_TUNNELS=True >> localrc
echo TENANT_TUNNEL_RANGES=1:1000 >> localrc
echo OVS_ENABLE_TUNNELING=True >> localrc
echo SWIFT_LOOPBACK_DISK_SIZE=10000000 >> localrc
echo SWIFT_HASH=stack >> localrc
#
# Build vms-talk.sh script
cat << EOS > $HOME/vms-talk.sh
#!/bin/bash
# Allowing guests in DevStack to talk to outside world 
# https://ask.openstack.org/en/question/1830/allowing-guests-in-devstack-to-talk-to-outside-world/
/sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
# Save lists
# https://help.ubuntu.com/community/IptablesHowTo
/sbin/iptables-save -c > /etc/iptables.rules
cat << EOF > /etc/network/if-pre-up.d/iptablesload
#!/bin/sh
/sbin/iptables-restore < /etc/iptables.rules
exit 0
EOF
cat << EOF > /etc/network/if-post-down.d/iptablessave
#!/bin/sh
/sbin/iptables-save -c > /etc/iptables.rules
if [ -f /etc/iptables.downrules ]; then
    /sbin/iptables-restore < /etc/iptables.downrules
fi
exit 0
EOF
chmod +x /etc/network/if-post-down.d/iptablessave
chmod +x /etc/network/if-pre-up.d/iptablesload
EOS
chmod +x $HOME/vms-talk.sh

./stack.sh

