#!/bin/bash
# Base template to create a localrc or local.conf to bulid devstack
# This devstack will need at least 8Gb to run a real vm with ubuntu or fedora
#
# A reference for a good localrc here:
# http://www.sebastien-han.fr/blog/2013/08/16/best-localrc-for-devstack/
#
. /etc/environment
sudo apt-get install -y python-software-properties 
sudo apt-get install -y uuid
# Adding havana repo
sudo add-apt-repository -y cloud-archive:havana
sudo apt-get update -y
sudo apt-get -y dist-upgrade

git clone https://github.com/openstack-dev/devstack.git -b <%= @devstack_branch %> devstack
cd devstack
git checkout <%= @devstack_branch %>
<% if @devstack_branch == "master" or @devstack_branch == "stable/icehouse" %>
    <% devstack_conf_file = "local.conf" %>
    echo StrictHostKeyChecking=no >> ~/.ssh/config
    git fetch https://review.openstack.org/openstack-dev/devstack refs/changes/20/85120/2 && git cherry-pick FETCH_HEAD
    echo [[local\|localrc]] > <%= devstack_conf_file %>
<% else %>
    <% devstack_conf_file = "localrc" %>
<% end %>
# Detect if we already have the images in vagrant shared folder
<% if @vm_type == "vagrant" %>
# copy keys if they exists
if [ -f /home/vagrant/.host_ssh/id_rsa.pub ]; then
    cp  /home/vagrant/.host_ssh/id_rsa.pub /home/vagrant/.ssh/
    chown <%= @stackuser %>:<%= @stackuser %> /home/<%= @stackuser %>/.ssh/id_rsa.pub
    chmod 644 /home/<%= @stackuser %>/.ssh/id_rsa.pub
fi
if [ -f /home/vagrant/.host_ssh/id_rsa ]; then
    cp  /home/vagrant/.host_ssh/id_rsa /home/vagrant/.ssh/
    chown <%= @stackuser %>:<%= @stackuser %> /home/<%= @stackuser %>/.ssh/id_rsa
    chmod 600 /home/<%= @stackuser %>/.ssh/id_rsa
fi
# copy images if they exists
[ -f /vagrant/cirros-0.3.2-x86_64-disk.img ] && cp /vagrant/cirros-0.3.2-x86_64-disk.img /home/vagrant/devstack/files/ 
[ -f /vagrant/F17-x86_64-cfntools.qcow2 ] && cp /vagrant/F17-x86_64-cfntools.qcow2 /home/vagrant/devstack/files
[ -f /vagrant/precise-server-cloudimg-amd64-disk1.img ] && cp /vagrant/precise-server-cloudimg-amd64-disk1.img /home/vagrant/devstack/files
<% end %>
# Build <%= devstack_conf_file %>
# Misc
echo DATABASE_PASSWORD=password >> <%= devstack_conf_file %>
echo RABBIT_PASSWORD=password >> <%= devstack_conf_file %>
echo SERVICE_TOKEN=password >> <%= devstack_conf_file %>
echo SERVICE_PASSWORD=password >> <%= devstack_conf_file %>
echo ADMIN_PASSWORD=password >> <%= devstack_conf_file %>
echo SERVICE_TOKEN=`uuid`  >> <%= devstack_conf_file %>
echo >> <%= devstack_conf_file %> 

# Repos
cat << EOF >> <%= devstack_conf_file %> 
disable_service n-net
IMAGE_URLS+=",https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img"
IMAGE_URLS+=",http://fedorapeople.org/groups/heat/prebuilt-jeos-images/F17-x86_64-cfntools.qcow2,http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img"

# Reclone each time
RECLONE=yes

## For Keystone
KEYSTONE_TOKEN_FORMAT=PKI

# Enable Logging
VERBOSE=True
LOG_COLOR=True
SCREEN_LOGDIR=/opt/stack/logs
LOGFILE=/opt/stack/logs/stack.sh.log
LOGDAYS=2

# Pre-requisite
ENABLED_SERVICES=rabbit,mysql,key

# If you want ZeroMQ instead of RabbitMQ (don't forget to un-declare 'rabbit' from the pre-requesite)
# ENABLED_SERVICES+=,-rabbit,-qpid,zeromq

# If you want Qpid instead of RabbitMQ (don't forget to un-declare 'rabbit' from the pre-requesite)
# ENABLED_SERVICES+=,-rabbit,-zeromq,qpid

# Nova - Compute Service
ENABLED_SERVICES+=,n-api,n-crt,n-obj,n-cpu,n-cond,n-sch

# Dstat
ENABLED_SERVICES+=,dstat

# VNC
ENABLED_SERVICES+=,n-novnc,n-xvnc,n-cauth

# Nova Network - If you don't want to use Neutron and need a simple network setup (old good stuff!)
# ENABLED_SERVICES+=,n-net

# Glance - Image Service
ENABLED_SERVICES+=,g-api,g-reg

# Neutron - Networking Service
# If Neutron is not declared the old good nova-network will be used
ENABLED_SERVICES+=,q-svc,q-agt,q-dhcp,q-l3,q-meta,neutron

# Cinder - Block Device Service
ENABLED_SERVICES+=,cinder,c-api,c-vol,c-sch,c-bak

# Horizon (Dashboard UI) - (always use the trunk)
ENABLED_SERVICES+=,horizon

# Apache fronted for WSGI
APACHE_ENABLED_SERVICES+=keystone

# Tempest
ENABLED_SERVICES+=,tempest

<% if has_variable?("ipaddress_eth1") %><% then %>
HOST_IP=<%= @ipaddress_eth1 %>
FLAT_INTERFACE=eth1
<% else %>
HOST_IP=<%= @ipaddress_eth0 %>
FLAT_INTERFACE=eth0
<% end %>
<% if @devstack_setup == "complex" %>
################## Complex #############################

# For Swift
SWIFT_REPLICAS=1
SWIFT_HASH=011688b44136573e209e
SWIFT_DATA_DIR=\$DEST/data

# Apache fronted for WSGI
APACHE_ENABLED_SERVICES+=,swift

# Nova Cells
# ENABLED_SERVICES+=,n-cell

# Swift - Object Storage
ENABLED_SERVICES+=,s-proxy,s-object,s-container,s-account

# Neutron - Load Balancing
ENABLED_SERVICES+=,q-lbaas

# Neutron - VPN as a Service
ENABLED_SERVICES+=,q-vpn

# Neutron - Firewall as a Service
ENABLED_SERVICES+=,q-fwaas

# VLAN configuration
ENABLE_TENANT_VLANS=True
Q_PLUGIN=ml2

# GRE tunnel configuration
Q_PLUGIN=ml2
ENABLE_TENANT_TUNNELS=True

# VXLAN tunnel configuration
# Q_PLUGIN=ml2
# Q_ML2_TENANT_NETWORK_TYPE=vxlan

ENABLE_TENANT_TUNNELS=True
<% if @devstack_branch != "master" or @devstack_branch == "stable/icehouse" %>
Q_AGENT_EXTRA_AGENT_OPTS=(tunnel_type=gre)
Q_AGENT_EXTRA_OVS_OPTS=(tenant_network_type=gre)
Q_SRV_EXTRA_OPTS=(tenant_network_type=gre)
<% end %>
TENANT_TUNNEL_RANGE=50:100

# Heat - Orchestration Service
ENABLED_SERVICES+=,heat,h-api,h-api-cfn,h-api-cw,h-eng

# Ceilometer - Metering Service (metering + alarming)
ENABLED_SERVICES+=,ceilometer-acompute,ceilometer-acentral,ceilometer-collector,ceilometer-api
ENABLED_SERVICES+=,ceilometer-alarm-notify,ceilometer-alarm-eval

# Trove
ENABLED_SERVICES+=,tr-api,tr-tmgr,tr-cond,trove

<% if @devstack_branch == "master" or @devstack_branch == "stable/icehouse" %>
[[post-config|/\$Q_PLUGIN_CONF_FILE]]
[agent]
tunnel_type=gre

[[post-config|\$NEUTRON_CONF]]
[DEFAULT]
tenant_network_type=gre
<% end %>
<% end %>
EOF
#
# Build local.sh script
cat << EOS > $HOME/devstack/local.sh
#!/bin/bash
set -o xtrace

echo "Running local.sh"

openrc=/home/<%= @stackuser %>/devstack/openrc
source functions

for user in admin demo; do
    source \$openrc \$user \$user
    <% if @vm_type != "vagrant" %> 
    nova keypair-add \$user > /home/<%= @stackuser %>/.ssh/\$user.pem 
    chown <%= @stackuser %>:<%= @stackuser %> /home/<%= @stackuser %>/.ssh/\$user.pem
    chmod 600 /home/<%= @stackuser %>/.ssh/\$user.pem
    <% else %>
    nova keypair-add --pub-key /home/<%= @stackuser %>/.ssh/id_rsa.pub mykey
    <% end %>
    neutron security-group-rule-create --protocol icmp --direction ingress default
    neutron security-group-rule-create --protocol tcp --port-range-min 22 --port-range-max 22 --direction ingress default
done
# Allowing guests in DevStack to talk to outside world 
# https://ask.openstack.org/en/question/1830/allowing-guests-in-devstack-to-talk-to-outside-world/
sudo /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
# Save lists
# https://help.ubuntu.com/community/IptablesHowTo
sudo sh -c "iptables-save -c > /etc/iptables.rules"
sudo sh -c "cat << EOF > /etc/network/if-pre-up.d/iptablesload
#!/bin/sh
/sbin/iptables-restore < /etc/iptables.rules
exit 0
EOF"
sudo sh -c "cat << EOF > /etc/network/if-post-down.d/iptablessave
#!/bin/sh
/sbin/iptables-save -c > /etc/iptables.rules
if [ -f /etc/iptables.downrules ]; then
    /sbin/iptables-restore < /etc/iptables.downrules
fi
exit 0
EOF"
sudo chmod +x /etc/network/if-post-down.d/iptablessave
sudo chmod +x /etc/network/if-pre-up.d/iptablesload
EOS
chmod +x /home/<%= @stackuser %>/devstack/local.sh

./stack.sh
